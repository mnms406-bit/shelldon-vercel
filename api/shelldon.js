// /api/shelldon.js
import fs from 'fs';
import path from 'path';

export default async function handler(req, res) {
  // CORS for your frontend
  res.setHeader('Access-Control-Allow-Origin', 'https://enajif.com');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();

  const { message } = req.query;
  if (!message) return res.status(400).json({ reply: 'Please provide a message.' });

  try {
    // Load the siteData JSON generated by the crawler
    const filePath = path.join('/tmp', 'siteData.json'); // Adjust if you store elsewhere
    if (!fs.existsSync(filePath)) {
      return res.status(500).json({ reply: "Shelldon's brain is not ready yet. Please try again later." });
    }

    const siteData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Flatten all content into text blocks
    const knowledge = [];

    siteData.products.forEach(p => {
      knowledge.push(`Product: ${p.title}\nDescription: ${p.body_html || p.description || ''}`);
    });

    siteData.collections.forEach(c => {
      knowledge.push(`Collection: ${c.title}\nDescription: ${c.body_html || ''}`);
    });

    siteData.pages.forEach(pg => {
      knowledge.push(`Page: ${pg.title}\nContent: ${pg.body || ''}`);
    });

    // Construct system prompt for OpenAI
    const systemPrompt = `You are Shelldon, the virtual assistant for the Shopify store at http://51294e-8f.myshopify.com. Answer questions only about this store using the following knowledge:\n\n${knowledge.join('\n\n')}`;

    // Call OpenAI
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    const data = await response.json();
    const reply = data?.choices?.[0]?.message?.content || "Shelldon couldn’t get a response right now.";

    res.status(200).json({ reply });
  } catch (err) {
    console.error("Shelldon serverless error:", err);
    res.status(500).json({ reply: "Shelldon couldn’t get a response right now." });
  }
}
